name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Run tests
      run: |
        pytest --cov=sai --cov=saigen

    - name: Run linting
      run: |
        black --check sai saigen tests
        isort --check-only sai saigen tests
        flake8 sai saigen tests
        mypy sai saigen

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish-pypi:
    runs-on: ubuntu-latest
    needs: build
    environment: release
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/

  create-release:
    runs-on: ubuntu-latest
    needs: [build, publish-pypi]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Extract release notes
      id: extract-notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract release notes from CHANGELOG.md
        python3 << 'EOF'
        import re
        import sys
        
        version = "${{ env.VERSION }}"
        
        try:
            with open("CHANGELOG.md", "r") as f:
                content = f.read()
            
            # Find the section for this version
            pattern = rf"## \[{re.escape(version)}\].*?\n(.*?)(?=\n## \[|\n# |\Z)"
            match = re.search(pattern, content, re.DOTALL)
            
            if match:
                notes = match.group(1).strip()
                # Write to file for GitHub Actions
                with open("release_notes.md", "w") as f:
                    f.write(notes)
                print("Release notes extracted successfully")
            else:
                print("No release notes found for this version")
                with open("release_notes.md", "w") as f:
                    f.write(f"Release {version}")
        except Exception as e:
            print(f"Error extracting release notes: {e}")
            with open("release_notes.md", "w") as f:
                f.write(f"Release {version}")
        EOF
      env:
        VERSION: ${{ steps.extract-notes.outputs.version }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: ${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
    steps:
    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: sai
      continue-on-error: true  # Don't fail the release if Homebrew update fails

  notify:
    runs-on: ubuntu-latest
    needs: [create-release, update-homebrew]
    if: always()
    steps:
    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "✅ Release v${{ steps.version.outputs.version }} completed successfully!"
        echo "📦 Package published to PyPI: https://pypi.org/project/sai/${{ steps.version.outputs.version }}/"
        echo "🚀 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"

    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "❌ Release v${{ steps.version.outputs.version }} failed!"
        exit 1