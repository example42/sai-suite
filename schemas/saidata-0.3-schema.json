{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SaiData Schema",
  "description": "Saidata structure. With resources defaults and providers and repositories overrides",
  "type": "object",
  "properties": {
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+(\\.\\d+)?$"
    },
    "metadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "subcategory": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "maintainer": {
          "type": "string"
        },
        "urls": {
          "$ref": "#/definitions/urls"
        },
        "security": {
          "$ref": "#/definitions/security_metadata"
        }
      },
      "required": [
        "name"
      ]
    },
    "packages": {
      "type": "array",
      "description": "Default package definitions that apply across providers",
      "items": {
        "$ref": "#/definitions/package"
      }
    },
    "services": {
      "type": "array",
      "description": "Default service definitions that apply across providers",
      "items": {
        "$ref": "#/definitions/service"
      }
    },
    "files": {
      "type": "array",
      "description": "Default file definitions that apply across providers",
      "items": {
        "$ref": "#/definitions/file"
      }
    },
    "directories": {
      "type": "array",
      "description": "Default directory definitions that apply across providers",
      "items": {
        "$ref": "#/definitions/directory"
      }
    },
    "commands": {
      "type": "array",
      "description": "Default command definitions that apply across providers",
      "items": {
        "$ref": "#/definitions/command"
      }
    },
    "ports": {
      "type": "array",
      "description": "Default port definitions that apply across providers",
      "items": {
        "$ref": "#/definitions/port"
      }
    },
    "containers": {
      "type": "array",
      "description": "Default container definitions that apply across providers",
      "items": {
        "$ref": "#/definitions/container"
      }
    },
    "sources": {
      "type": "array",
      "description": "Default source build definitions that apply across providers. Used for building software from source code with various build systems (autotools, cmake, make, etc.)",
      "items": {
        "$ref": "#/definitions/source"
      },
      "examples": [
        [
          {
            "name": "main",
            "url": "https://example.com/software-{{version}}.tar.gz",
            "version": "1.0.0",
            "build_system": "autotools",
            "configure_args": ["--enable-ssl", "--with-modules"]
          }
        ]
      ]
    },
    "binaries": {
      "type": "array",
      "description": "Default binary download definitions that apply across providers. Used for downloading pre-compiled binaries with OS/architecture templating support",
      "items": {
        "$ref": "#/definitions/binary"
      },
      "examples": [
        [
          {
            "name": "main",
            "url": "https://releases.example.com/{{version}}/software_{{version}}_{{platform}}_{{architecture}}.zip",
            "version": "1.0.0",
            "checksum": "sha256:abc123...",
            "install_path": "/usr/local/bin"
          }
        ]
      ]
    },
    "scripts": {
      "type": "array",
      "description": "Default script installation definitions that apply across providers. Used for executing installation scripts with security measures and environment variable support",
      "items": {
        "$ref": "#/definitions/script"
      },
      "examples": [
        [
          {
            "name": "official",
            "url": "https://get.example.com/install.sh",
            "checksum": "sha256:def456...",
            "interpreter": "bash",
            "timeout": 300
          }
        ]
      ]
    },
    "providers": {
      "type": "object",
      "description": "Provider-specific configurations that can override or extend defaults",
      "additionalProperties": {
        "$ref": "#/definitions/provider_config"
      }
    },
    "compatibility": {
      "type": "object",
      "properties": {
        "matrix": {
          "type": "array",
          "description": "Compatibility matrix showing which providers work on which platforms",
          "items": {
            "$ref": "#/definitions/compatibility_entry"
          }
        },
        "versions": {
          "$ref": "#/definitions/versions"
        }
      }
    }
  },
  "required": [
    "version",
    "metadata"
  ],
  "definitions": {
    "provider_config": {
      "type": "object",
      "properties": {
        "prerequisites": {
          "type": "array",
          "description": "Required packages for source compilation",
          "items": {
            "type": "string"
          }
        },
        "build_commands": {
          "type": "array",
          "description": "Commands used for source compilation",
          "items": {
            "type": "string"
          }
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/package"
          }
        },
        "package_sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/package_source"
          }
        },
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/repository"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/service"
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file"
          }
        },
        "directories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/directory"
          }
        },
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/command"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/port"
          }
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/container"
          }
        },
        "sources": {
          "type": "array",
          "description": "Provider-specific source build configurations that override or extend default sources",
          "items": {
            "$ref": "#/definitions/source"
          }
        },
        "binaries": {
          "type": "array",
          "description": "Provider-specific binary download configurations that override or extend default binaries",
          "items": {
            "$ref": "#/definitions/binary"
          }
        },
        "scripts": {
          "type": "array",
          "description": "Provider-specific script installation configurations that override or extend default scripts",
          "items": {
            "$ref": "#/definitions/script"
          }
        }
      }
    },
    "package": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Logical name used as key for OS overrides and provider-specific configurations"
        },
        "package_name": {
          "type": "string",
          "description": "Actual package name used by package managers and providers"
        },
        "version": {
          "type": "string"
        },
        "alternatives": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "install_options": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "checksum": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "download_url": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "package_name"
      ]
    },
    "service": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "service_name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "systemd",
            "init",
            "launchd",
            "windows_service",
            "docker",
            "kubernetes"
          ]
        },
        "enabled": {
          "type": "boolean"
        },
        "config_files": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "file": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Logical name for the file (e.g., config, dotconf, log, data, binary)"
        },
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "config",
            "binary",
            "library",
            "data",
            "log",
            "temp",
            "socket"
          ]
        },
        "owner": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "backup": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "path"
      ]
    },
    "directory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Logical name for the directory (e.g., config, dotconf, log, data, lib)"
        },
        "path": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "recursive": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "path"
      ]
    },
    "command": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "shell_completion": {
          "type": "boolean"
        },
        "man_page": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "port": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "tcp",
            "udp",
            "sctp"
          ]
        },
        "service": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "port"
      ]
    },
    "container": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "registry": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "image"
      ]
    },
    "source": {
      "type": "object",
      "description": "Source build configuration for compiling software from source code",
      "examples": [
        {
          "name": "main",
          "url": "https://nginx.org/download/nginx-{{version}}.tar.gz",
          "version": "1.24.0",
          "build_system": "autotools",
          "configure_args": ["--with-http_ssl_module", "--with-http_v2_module"],
          "prerequisites": ["build-essential", "libssl-dev"],
          "checksum": "sha256:abc123..."
        }
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Logical name for the source build (e.g., main, stable, dev). Used for referencing in template functions and provider configurations",
          "examples": ["main", "stable", "dev", "latest"]
        },
        "url": {
          "type": "string",
          "description": "Source code download URL. Supports templating with {{version}}, {{platform}}, {{architecture}} placeholders",
          "examples": [
            "https://nginx.org/download/nginx-{{version}}.tar.gz",
            "https://github.com/user/repo/archive/v{{version}}.tar.gz"
          ]
        },
        "version": {
          "type": "string",
          "description": "Version to build. Used in URL templating and for version detection",
          "examples": ["1.24.0", "2.4.58", "latest"]
        },
        "build_system": {
          "type": "string",
          "enum": [
            "autotools",
            "cmake",
            "make",
            "meson",
            "ninja",
            "custom"
          ],
          "description": "Build system type. Determines the default build commands used by the source provider",
          "examples": ["autotools", "cmake", "make"]
        },
        "build_dir": {
          "type": "string",
          "description": "Directory for building. Defaults to /tmp/sai-build-{software-name} if not specified",
          "examples": ["/tmp/sai-build-nginx", "/var/tmp/build", "~/build"]
        },
        "source_dir": {
          "type": "string",
          "description": "Directory containing extracted source code. Auto-detected from archive structure if not specified",
          "examples": ["/tmp/sai-build-nginx/nginx-1.24.0", "build/src"]
        },
        "install_prefix": {
          "type": "string",
          "description": "Installation prefix for compiled binaries and files. Defaults to /usr/local",
          "examples": ["/usr/local", "/opt/software", "~/local"]
        },
        "configure_args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments passed to the configure step (autotools/cmake)",
          "examples": [
            ["--with-http_ssl_module", "--enable-shared"],
            ["-DCMAKE_BUILD_TYPE=Release", "-DENABLE_SSL=ON"]
          ]
        },
        "build_args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments passed to the build step (make/ninja)",
          "examples": [
            ["-j4", "VERBOSE=1"],
            ["--parallel", "4"]
          ]
        },
        "install_args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments passed to the install step",
          "examples": [
            ["DESTDIR=/tmp/staging"],
            ["--prefix=/usr/local"]
          ]
        },
        "prerequisites": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required packages/tools that must be installed before building",
          "examples": [
            ["build-essential", "libssl-dev", "cmake"],
            ["gcc", "make", "autotools-dev"]
          ]
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Environment variables set during the build process",
          "examples": [
            {"CC": "gcc", "CFLAGS": "-O2 -g", "LDFLAGS": "-L/usr/local/lib"}
          ]
        },
        "checksum": {
          "type": "string",
          "description": "Expected checksum of source archive for integrity verification. Format: algorithm:hash",
          "pattern": "^(sha256|sha512|md5):[a-fA-F0-9]{32,128}$",
          "examples": [
            "sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7",
            "sha512:abc123def456..."
          ]
        },
        "custom_commands": {
          "type": "object",
          "description": "Custom commands that override default build system behavior",
          "properties": {
            "download": {
              "type": "string",
              "description": "Custom command to download source code. Overrides default wget/curl behavior",
              "examples": ["git clone https://github.com/user/repo.git", "wget -O source.tar.gz {{url}}"]
            },
            "extract": {
              "type": "string",
              "description": "Custom command to extract downloaded archive. Overrides default tar/unzip behavior",
              "examples": ["tar -xzf source.tar.gz", "unzip -q archive.zip"]
            },
            "configure": {
              "type": "string",
              "description": "Custom configure command. Overrides default autotools/cmake configure step",
              "examples": ["./configure --prefix=/usr/local --enable-ssl", "cmake -DCMAKE_BUILD_TYPE=Release ."]
            },
            "build": {
              "type": "string",
              "description": "Custom build command. Overrides default make/ninja build step",
              "examples": ["make -j$(nproc)", "ninja", "cargo build --release"]
            },
            "install": {
              "type": "string",
              "description": "Custom install command. Overrides default make install behavior",
              "examples": ["make install", "ninja install", "cp binary /usr/local/bin/"]
            },
            "uninstall": {
              "type": "string",
              "description": "Custom uninstall command for removing installed files",
              "examples": ["make uninstall", "rm -rf /usr/local/bin/software /etc/software"]
            },
            "validation": {
              "type": "string",
              "description": "Command to validate successful installation",
              "examples": ["nginx -t", "software --version", "systemctl is-active software"]
            },
            "version": {
              "type": "string",
              "description": "Command to get installed version for tracking",
              "examples": ["nginx -v 2>&1 | grep -o 'nginx/[0-9.]*'", "software --version | cut -d' ' -f2"]
            }
          }
        }
      },
      "required": [
        "name",
        "url",
        "build_system"
      ]
    },
    "binary": {
      "type": "object",
      "description": "Binary download configuration for installing pre-compiled executables",
      "examples": [
        {
          "name": "main",
          "url": "https://releases.hashicorp.com/terraform/{{version}}/terraform_{{version}}_{{platform}}_{{architecture}}.zip",
          "version": "1.5.0",
          "checksum": "sha256:fa16d72a078210a54c47dd5bef2f8b9b8a01d94909a51453956b3ec6442ea4c5",
          "install_path": "/usr/local/bin",
          "executable": "terraform"
        }
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Logical name for the binary download (e.g., main, stable, dev). Used for referencing in template functions",
          "examples": ["main", "stable", "dev", "latest", "lts"]
        },
        "url": {
          "type": "string",
          "description": "Binary download URL. Supports templating with {{version}}, {{platform}}, {{architecture}} placeholders. Platform values: linux, darwin, windows. Architecture values: amd64, arm64, 386",
          "examples": [
            "https://releases.hashicorp.com/terraform/{{version}}/terraform_{{version}}_{{platform}}_{{architecture}}.zip",
            "https://github.com/user/repo/releases/download/v{{version}}/binary-{{platform}}-{{architecture}}.tar.gz"
          ]
        },
        "version": {
          "type": "string",
          "description": "Version to download. Used in URL templating and for version tracking",
          "examples": ["1.5.0", "2.1.3", "latest"]
        },
        "architecture": {
          "type": "string",
          "description": "Target architecture. Auto-detected if not specified. Common values: amd64, arm64, 386",
          "examples": ["amd64", "arm64", "386"]
        },
        "platform": {
          "type": "string",
          "description": "Target platform/OS. Auto-detected if not specified. Common values: linux, darwin, windows",
          "examples": ["linux", "darwin", "windows"]
        },
        "checksum": {
          "type": "string",
          "description": "Expected checksum of binary file for integrity verification. Format: algorithm:hash",
          "pattern": "^(sha256|sha512|md5):[a-fA-F0-9]{32,128}$",
          "examples": [
            "sha256:fa16d72a078210a54c47dd5bef2f8b9b8a01d94909a51453956b3ec6442ea4c5"
          ]
        },
        "install_path": {
          "type": "string",
          "description": "Installation directory for the binary. Defaults to /usr/local/bin",
          "examples": ["/usr/local/bin", "/opt/bin", "~/bin"]
        },
        "executable": {
          "type": "string",
          "description": "Executable name within archive or final executable name. Defaults to software name",
          "examples": ["terraform", "kubectl", "docker"]
        },
        "archive": {
          "type": "object",
          "description": "Archive extraction configuration for compressed binary downloads",
          "properties": {
            "format": {
              "type": "string",
              "enum": ["tar.gz", "tar.bz2", "tar.xz", "zip", "7z", "none"],
              "description": "Archive format. Auto-detected from URL extension if not specified. Use 'none' for direct binary downloads",
              "examples": ["zip", "tar.gz", "none"]
            },
            "strip_prefix": {
              "type": "string",
              "description": "Directory prefix to strip during extraction. Useful when archive contains a single top-level directory",
              "examples": ["terraform_1.5.0_linux_amd64/", "software-v1.0.0/"]
            },
            "extract_path": {
              "type": "string",
              "description": "Specific path within archive to extract. Defaults to extracting entire archive",
              "examples": ["bin/", "dist/", "release/"]
            }
          }
        },
        "permissions": {
          "type": "string",
          "pattern": "^[0-7]{3,4}$",
          "description": "File permissions in octal format (defaults to 0755)"
        },
        "custom_commands": {
          "type": "object",
          "description": "Custom commands that override default binary installation behavior",
          "properties": {
            "download": {
              "type": "string",
              "description": "Custom command to download binary. Overrides default wget/curl behavior",
              "examples": ["curl -L -o binary.zip {{url}}", "wget --progress=bar {{url}}"]
            },
            "extract": {
              "type": "string",
              "description": "Custom command to extract downloaded archive. Overrides default unzip/tar behavior",
              "examples": ["unzip -q binary.zip", "tar -xzf binary.tar.gz"]
            },
            "install": {
              "type": "string",
              "description": "Custom install command. Overrides default file copy and permission setting",
              "examples": ["mv binary /usr/local/bin/ && chmod +x /usr/local/bin/binary", "install -m 755 binary /usr/local/bin/"]
            },
            "uninstall": {
              "type": "string",
              "description": "Custom uninstall command for removing installed binary",
              "examples": ["rm -f /usr/local/bin/binary", "rm -rf /opt/software"]
            },
            "validation": {
              "type": "string",
              "description": "Command to validate successful installation",
              "examples": ["binary --version", "which binary", "test -x /usr/local/bin/binary"]
            },
            "version": {
              "type": "string",
              "description": "Command to get installed version for tracking",
              "examples": ["binary --version | cut -d' ' -f2", "binary version | head -n1"]
            }
          }
        }
      },
      "required": [
        "name",
        "url"
      ]
    },
    "script": {
      "type": "object",
      "description": "Script installation configuration for executing installation scripts with security measures",
      "examples": [
        {
          "name": "official",
          "url": "https://get.docker.com",
          "checksum": "sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7",
          "interpreter": "bash",
          "arguments": ["--channel", "stable"],
          "timeout": 600
        }
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Logical name for the script installation (e.g., main, official, dev). Used for referencing in template functions",
          "examples": ["official", "convenience", "installer", "setup"]
        },
        "url": {
          "type": "string",
          "description": "Script download URL. Should use HTTPS for security. Supports templating with {{version}} placeholder",
          "examples": [
            "https://get.docker.com",
            "https://sh.rustup.rs",
            "https://raw.githubusercontent.com/user/repo/{{version}}/install.sh"
          ]
        },
        "version": {
          "type": "string",
          "description": "Version identifier used in URL templating and for tracking",
          "examples": ["latest", "v1.0.0", "stable"]
        },
        "interpreter": {
          "type": "string",
          "description": "Script interpreter. Auto-detected from shebang if not specified. Common values: bash, sh, python, python3",
          "examples": ["bash", "sh", "python", "python3", "zsh"]
        },
        "checksum": {
          "type": "string",
          "description": "Expected checksum of script file for security verification. Format: algorithm:hash",
          "pattern": "^(sha256|sha512|md5):[a-fA-F0-9]{32,128}$",
          "examples": [
            "sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7"
          ]
        },
        "arguments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments passed to the script during execution",
          "examples": [
            ["--channel", "stable"],
            ["--yes", "--quiet"],
            ["install", "--user"]
          ]
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Environment variables set during script execution",
          "examples": [
            {"CHANNEL": "stable", "DOWNLOAD_URL": "https://download.docker.com"}
          ]
        },
        "working_dir": {
          "type": "string",
          "description": "Working directory for script execution. Defaults to temporary directory",
          "examples": ["/tmp", "~/Downloads", "/var/tmp"]
        },
        "timeout": {
          "type": "integer",
          "minimum": 1,
          "maximum": 3600,
          "description": "Execution timeout in seconds. Defaults to 300 (5 minutes)",
          "examples": [300, 600, 1800]
        },
        "custom_commands": {
          "type": "object",
          "description": "Custom commands that override default script execution behavior",
          "properties": {
            "download": {
              "type": "string",
              "description": "Custom command to download script. Overrides default wget/curl behavior",
              "examples": ["curl -fsSL {{url}} -o install.sh", "wget -q {{url}}"]
            },
            "install": {
              "type": "string",
              "description": "Custom install command that completely overrides script execution",
              "examples": ["bash install.sh --yes --quiet", "python3 setup.py install --user"]
            },
            "uninstall": {
              "type": "string",
              "description": "Custom uninstall command for removing software installed by script",
              "examples": ["bash uninstall.sh", "pip uninstall -y package", "rm -rf /opt/software"]
            },
            "validation": {
              "type": "string",
              "description": "Command to validate successful installation",
              "examples": ["software --version", "systemctl is-active software", "which software"]
            },
            "version": {
              "type": "string",
              "description": "Command to get installed version for tracking",
              "examples": ["software --version | cut -d' ' -f2", "software version"]
            }
          }
        }
      },
      "required": [
        "name",
        "url"
      ]
    },
    "package_source": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Source identifier (e.g., official, os-default, backports)"
        },
        "priority": {
          "type": "integer",
          "description": "Priority order (1 = highest)"
        },
        "recommended": {
          "type": "boolean",
          "description": "Whether this source is recommended"
        },
        "repository": {
          "type": "string",
          "description": "Repository name to use"
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/package"
          }
        },
        "notes": {
          "type": "string",
          "description": "Additional information about this source"
        }
      },
      "required": [
        "name",
        "repository",
        "packages"
      ]
    },
    "repository": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "upstream",
            "os-default",
            "os-backports",
            "third-party"
          ],
          "description": "Repository type"
        },
        "components": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maintainer": {
          "type": "string",
          "description": "Repository maintainer"
        },
        "priority": {
          "type": "integer",
          "description": "Priority order (1 = highest)"
        },
        "recommended": {
          "type": "boolean",
          "description": "Whether this repository is recommended"
        },
        "notes": {
          "type": "string"
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/package"
          },
          "description": "Package overrides for this repository"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/service"
          },
          "description": "Service overrides/additions for this repository"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file"
          },
          "description": "File overrides/additions for this repository"
        },
        "directories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/directory"
          },
          "description": "Directory overrides/additions for this repository"
        },
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/command"
          },
          "description": "Command overrides/additions for this repository"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/port"
          },
          "description": "Port overrides/additions for this repository"
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/container"
          },
          "description": "Container overrides/additions for this repository"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/source"
          },
          "description": "Source build overrides/additions for this repository"
        },
        "binaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/binary"
          },
          "description": "Binary download overrides/additions for this repository"
        },
        "scripts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/script"
          },
          "description": "Script installation overrides/additions for this repository"
        }
      },
      "required": [
        "name"
      ]
    },
    "compatibility_entry": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "platform": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "architecture": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "os_version": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "supported": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "tested": {
          "type": "boolean"
        },
        "recommended": {
          "type": "boolean"
        }
      },
      "required": [
        "provider",
        "platform",
        "supported"
      ]
    },
    "versions": {
      "type": "object",
      "properties": {
        "latest": {
          "type": "string"
        },
        "minimum": {
          "type": "string"
        },
        "latest_lts": {
          "type": "string"
        },
        "latest_minimum": {
          "type": "string"
        }
      }
    },
    "security_metadata": {
      "type": "object",
      "properties": {
        "cve_exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "security_contact": {
          "type": "string"
        },
        "vulnerability_disclosure": {
          "type": "string"
        },
        "sbom_url": {
          "type": "string"
        },
        "signing_key": {
          "type": "string"
        }
      }
    },
    "urls": {
      "type": "object",
      "properties": {
        "website": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "issues": {
          "type": "string"
        },
        "support": {
          "type": "string"
        },
        "download": {
          "type": "string"
        },
        "changelog": {
          "type": "string"
        },
        "license": {
          "type": "string"
        },
        "sbom": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        }
      }
    }
  }
}